# 9.1 Restaurant
class Restaurant():
    def __init__ (self, name, cuisine_type):
        """ Initialize the restaurant"""
        self.name=name.title()
        self.cuisine_type = cuisine_type
    def describe_restaurant(self):
        """Summary of the reastaurant"""
        msg= self.name + " has the most amazing " + self.cuisine_type
        print(f"\n {msg}")
    def open_restaurant(self):
        msg= self.name +" is open. Come inside!"
        print(f"\n {msg}")
restaurant = Restaurant('Olive Garden','Italian')
print(restaurant.name)
print(restaurant.cuisine_type)
restaurant.describe_restaurant()
restaurant.open_restaurant()
#9.2 Three restaurants
class Restaurant():
        def __init__(self, name, cuisine_type):
            """ Initialize the restaurant"""
            self.name = name.title()
            self.cuisine_type = cuisine_type

        def describe_restaurant(self):
            """Summary of the reastaurant"""
            msg = self.name + " has amazing " + self.cuisine_type
            print(f"\n {msg}")
        def open_restaurant(self):
            msg= self.name +'is open! Come inside'
            print(f"\n{msg}")
waffle_house = Restaurant('Waffle house','Breakfest')
waffle_house.describe_restaurant()
culvers = Restaurant('Culvers','American food')
culvers.describe_restaurant()
Zaxbys = Restaurant('Zaxbys','Fast food')
Zaxbys.describe_restaurant()
#9.3 Users
class User():
    def __init__(self,first_name, last_name, username, email, location ):
        """Initialize the user."""
        self.first_name = first_name.title()
        self.last_name = last_name.title()
        self.username = username
        self.email = email
        self.location = location.title()
    def describe_users(self):
        """ Users information"""
        print("\n" + self.first_name + "" + self.last_name)
        print(" Username:" + self.username)
        print(" Email:" + self.email)
        print(" Location:" + self.location)
    def greet_users(self):
        print("\nWelcome back," + self.username +"!")
Courtney = User('Courtney','Blum','cblum1','c.blum1@andersonuniversity.edu','South Carolina')
Courtney.describe_users()
Courtney.greet_users()
Rhyan = User('Rhyan','Armstead','RwDawg','RwDawg@yahoo.com','Texas')
Rhyan.describe_users()
Rhyan.greet_users()

#9.4
class Restaurant():
    def __init__ (self, name, cuisine_type, customers_sold):
        """ Initialize the restaurant"""
        self.name=name.title()
        self.cuisine_type = cuisine_type
        self.customers_sold = customers_sold
    def describe_restaurant(self):
        """Summary of the reastaurant"""
        msg= self.name + " has the most amazing " + self.cuisine_type
        print(f"\n {msg}")
    def open_restaurant(self):
        msg= self.name +" is open. Come inside!"
        print(f"\n {msg}")
    def customer_sold(self,customers_sold):
        self.customer_sold = customers_sold
    def increment_number_served(self,added_served):
        self.increment_number_served=added_served
Restaurant.customer_sold=0
print(Restaurant.customer_sold)
Restaurant.customer_sold=200
print(f"{Restaurant.customer_sold} customers have been sold to today")
#9.5
class User():
    def __init__(self,first_name, last_name, username, email, location):
        """Initialize the user."""
        self.first_name = first_name.title()
        self.last_name = last_name.title()
        self.username = username
        self.email = email
        self.location = location.title()
        self.login_attemps = 0
    def describe_users(self):
        """ Users information"""
        print("\n" + self.first_name + "" + self.last_name)
        print(" Username:" + self.username)
        print(" Email:" + self.email)
        print(" Location:" + self.location)
    def greet_users(self):
        print("\nWelcome back," + self.username +"!")
    def increment_login_attemps(self):
        """increase by 1 """
        self.login_attemps += 1
    """Reset to 0 """
    def reset_login_attemps(self):
        self.login_attemps = 0
Rhyan = User('Rhyan', 'Armstead', 'RwDawg', 'RwDawg@yahoo.com', 'Texas')
Rhyan.describe_users()
Rhyan.greet_users()
print("\n 3 login trys attempted ")
Rhyan.increment_login_attemps()
Rhyan.increment_login_attemps()
Rhyan.increment_login_attemps()
print(" Login Attemps: " + str(Rhyan.login_attemps))
print("Reseting attempted logins..")
Rhyan.reset_login_attemps()
print("Login attemps:"+ str(Rhyan.login_attemps))
#9.6
class Restaurant():
    def __init__ (self, name, cuisine_type):
        """ Initialize the restaurant"""
        self.name=name.title()
        self.cuisine_type = cuisine_type
    def describe_restaurant(self):
        """Summary of the reastaurant"""
        msg= self.name + " has the most amazing " + self.cuisine_type
        print(f"\n {msg}")
    def open_restaurant(self):
        msg= self.name +" is open. Come inside!"
        print(f"\n {msg}")
    def number_served(self, number_served):
        self.number_served=number_served
    def increment_number_served(self, added_served):
        self.number_served += added_served
class Icecreamstand(Restaurant):
    def __init__(self, name, cuisine_type='Ice cream'):
        super().__init__(name,cuisine_type)
        self.flavors=[]
    def show_flavors(self):
        print("\n You can buy the following flavors")
        for flavor in self.flavors:
            print("-" + flavor.title())
courtneys_icecream = Icecreamstand("Courtneys icecream")
courtneys_icecream.flavors=['Mint','Mint choclate chip', 'Rocky Road','Moose tracks']
courtneys_icecream.describe_restaurant()
courtneys_icecream.show_flavors()
#9.7
class User():
    def __init__(self,first_name, last_name, username, email, location):
        """Initialize the user."""
        self.first_name = first_name.title()
        self.last_name = last_name.title()
        self.username = username
        self.email = email
        self.location = location.title()
        self.login_attemps = 0
    def describe_users(self):
        """ Users information"""
        print("\n" + self.first_name + "" + self.last_name)
        print(" Username:" + self.username)
        print(" Email:" + self.email)
        print(" Location:" + self.location)
    def greet_users(self):
        print("\nWelcome back," + self.username +" :)")
    def increment_login_attemps(self):
        """increase by 1 """
        self.login_attemps += 1
    """Reset to 0 """
    def reset_login_attemps(self):
        self.login_attemps = 0
class Admin(User):
    def __init__(self,first_name, last_name, username, email, location):
        super().__init__(first_name, last_name, username, email, location)
        self.privileges =[]
    def show_privileges(self):
        print("\n Rhyan's Admin Privileges:")
        for privilege in self.privileges:
            print("* " + privilege)
Rhyan = Admin('Rhyan', ' Armstead', 'RwDawg', 'RwDawg@yahoo.com', 'Texas')
Rhyan.describe_users()
Rhyan.privileges = [
    "Can terminate employees",
    "Can control access",
    "Can change passwords",
    "Can access sensitive material",
    ]
Rhyan.show_privileges()
#9.8
class User():
    def __init__(self,first_name, last_name, username, email, location):
        """Initialize the user."""
        self.first_name = first_name.title()
        self.last_name = last_name.title()
        self.username = username
        self.email = email
        self.location = location.title()
        self.login_attemps = 0
    def describe_users(self):
        """ Users information"""
        print("\n" + self.first_name + "" + self.last_name)
        print(" Username:" + self.username)
        print(" Email:" + self.email)
        print(" Location:" + self.location)
    def greet_users(self):
        print("\nWelcome back," + self.username +" :)")
    def increment_login_attemps(self):
        """increase by 1 """
        self.login_attemps += 1
    """Reset to 0 """
    def reset_login_attemps(self):
        self.login_attemps = 0
class Admin(User):
    def __init__(self,first_name, last_name, username, email, location):
        super().__init__(first_name, last_name, username, email, location)
        self.privileges = Privileges()
class Privileges():
        def __init__(self, privileges=[]):
            self.privileges = privileges
        def show_privileges(self):
            print("\n Privileges:")
            if self.privileges:
                for privilege in self.privileges:
                    print("* "+ privilege)
                else:
                    print("Privileges: ")
                    print("* This user has no privileges")
Rhyan = Admin('Rhyan', ' Armstead', 'RwDawg', 'RwDawg@yahoo.com', 'Texas')
Rhyan.describe_users()
Rhyan.privileges.show_privileges()
print("\n Your new privileges are listed below")
Rhyan_privileges = [
    "Can terminate employees",
    "Can control access",
    "Can change passwords",
    "Can access sensitive material",
    ]
Rhyan.privileges.privileges = Rhyan_privileges
Rhyan.privileges.show_privileges()
#9.9 1st one im skipping for now
#9.10
from my_restaurant import Restaurant
Zaxbys=Restaurant('Zaxbys','The cobb Zalad')
Zaxbys.describe_restaurant()
Zaxbys.open_restaurant()
#9.11
from storing_this import Admin
Rhyan_privileges = [
    "Can terminate employees",
    "Can control access",
    "Can change passwords",
    "Can access sensitive material",
    ]
Rhyan.privileges.privileges = Rhyan_privileges
print(f'The admin'+ Rhyan.username+'has the following privileges:')
Rhyan.privileges.show_privileges()
#9.12 2nd skip for now
#9.13
from random import randint
class Die:
    #A simple attempt to represent a die
    def __init__(self,side):
        self.sides = 6
    def roll_die(self):
        print(randint(1, self.sides))
dice=Die(100000)
dice.roll_die()
#9.14
from random import choice
def checker():
    my_ticket= 'abcd'
    winning_nums=''
    count = 0
    while my_ticket != winning_nums:
        list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a','b','c','d','e']
        first_choice = str(choice(list))
        second_choice = str(choice(list))
        third_choice= str(choice(list))
        fourth_choice = str(choice(list))
        winning_nums = first_choice + second_choice + third_choice + fourth_choice
        #print(f" ANy ticket matching these four numbers or letters wins a prize: {winning_nums}")
        count += 1
        print(count)
        print(my_ticket)
        print(winning_nums)
checker()
#9.15
"""I picked pickle (because duhh pickles are elite) -- object serialization which is an algorithm that allows 
you to turn an arbitary python object into a series of byte, it gives multiple examples on the website of how this is done also """

#10.1
file_name = 'blank.py'
print("One moment, I am reading this file currently...")
with open(file_name) as fn:
    include=fn.read()
print(include)
print('...looping over the file object:')
with open(file_name) as fn:
    for line in fn:
        print(line.rstrip())
print("\n 3rd time repeating this  :)")
with open(file_name) as fn:
        lines=fn.readlines()
for line in lines:
    print(line.rstrip())
#10.2
file_name='blank.py'
with open(file_name) as fn:
    lines = fn.readlines()
for line in lines:
    line = line.rstrip()
    print(line.replace('I','We'))
#10.3
name=input("Name:")
file_name = 'guest.txt'
with open(file_name,'w') as fn:
    fn.write(name)
#10.4
file_name = 'guest_book.txt'
print("Enter 'quit' when you are finished.")
while True:
    name = input("\n What is your name?")
    if name == 'quit':
        break
    else:
        with open(file_name,'a') as fn:
            fn.write(name +"\n")
            print("Yay"+ name + ", you are now on the guest book")
#10.5
filename = "programming_poll.txt"
responses = []
while True:
    response = input("\n Why do you like to program?")
    responses.append(response)
    continue_poll = input ("Would you like to hear from someone else? y/n")
    if continue_poll !='y':
        break
with open(filename, 'a') as fn:
    for response in responses:
        fn.write(response + '\n')
#10.6
try:
    x = input("Name any number:")
    x = int(x)
    y = input("Name any other number:")
    y= int(y)
except ValueError:
    print("Nice try, I need an actual number.")
else:
    sum = x + y
    print("The sum of"+ str(x) +"and" + str (sum) +".")
#10.7
print("Enter'q' when you are ready to quit.\n")
while True:
    try:
        x = input("\nName any Number:")
        if x == 'q':
            break
        x = int(x)
        y = input("Name another number:")
        if y == 'q':
            break
        y = int(y)
    except ValueError:
        print("Nice try, I need an actual number.")
    else:
        sum = x+y
        print("The sum of "+ str(x) + "and" + str(y) + "is" + str(sum) +".")
#10.8 3rd skip
#10.9 4th skip
#10.10 5th skip
#10.11
import json
number = input("What is your favorite number?")
with open('favorite_number.json','w') as fn:
    json.dump(number,fn)
with open('favorite_number.json') as fn:
    number = json.load(fn)
print("I know your favorite number! It's " + str(number) +".")
#10.12
import json
try:
    with open('favorite_number.json') as fn:
        number=json.load(fn)
except FileNotFoundError:
    number = input('Whats your favorite number?')
    with open ('favorite_number.json','w') as fn:
        json.dump(number, fn)
else:
    print("I know your favorite number! Its" +str(number) + ".")
#10.13 6th skip
#11.1 city, country
import unittest
from city_functions import city_country
class CitiesTestCase(unittest.Testcase):
    def test_city_country(self):
        moncks_corner = city_country('Moncks corner', 'usa')
        self.assertEqual(moncks_corner,'Moncks conrer, Usa')
unittest.main()
#11.2 7th skip
#11.3 8th skip
